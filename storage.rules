rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Claim proofs (private)
    match /owner_claims/{claimId}/proofs/{fileId} {
      // Requester can read/write their own claim proofs
      allow read, write: if request.auth != null &&
        firestore.get(/databases/(default)/documents/owner_claims/$(claimId)).data.requesterUid == request.auth.uid;

      // Admins can read/write
      allow read, write: if request.auth != null &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Fallback deny
      allow read, write: if false;
    }

    // Review verification proofs (private)
    match /reviews/{reviewId}/proofs/{fileId} {
      // Author can read/write their own review proofs
      allow read, write: if request.auth != null &&
        firestore.get(/databases/(default)/documents/reviews/$(reviewId)).data.userId == request.auth.uid;

      // Admins can read/write
      allow read, write: if request.auth != null &&
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Explicit deny fallback
      allow read, write: if false;
    }

    // Public review media (non-sensitive images/videos used in feed)
    // These are uploaded before/independent of a specific review doc.
    // - Anyone can read via download URLs
    // - Only authenticated users can upload
    match /reviews/{fileId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Profile images
    match /profile-images/{fileId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}
