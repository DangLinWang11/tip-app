rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function authed() { return request.auth != null; }
    function isOwner() { return authed() && resource.data.userId == request.auth.uid; }
    function isAdminUser() {
      return authed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    function isRestaurantOwner(restaurantId) {
      return authed() &&
        exists(/databases/$(database)/documents/restaurants/$(restaurantId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/restaurants/$(restaurantId)).data.ownerIds);
    }

    // Users collection - users can read any user but only edit their own
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Restaurants collection - anyone can read
    match /restaurants/{restaurantId} {
      allow read: if true;
      // Only admins can create/delete
      allow create, delete: if isAdminUser();
      // Update: admins can modify anything; non-admins cannot touch ownerIds
      allow update: if authed() && (
        isAdminUser() || (
          // Non-admin updates allowed only if ownerIds untouched on both sides
          !('ownerIds' in request.resource.data) && !('ownerIds' in resource.data)
        )
      );
    }

    // Menu items collection - anyone can read, authenticated users can create/update
    match /menuItems/{menuItemId} {
      allow read: if true;
      allow write: if authed();
      allow create: if authed();
    }

    // Reviews collection (v2 - query-enforced visibility)
    match /reviews/{reviewId} {
      // Public reads; queries enforce isDeleted == false
      allow read: if true;

      // Create: must be authed and create own review; enforce field types
      allow create: if authed()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.isDeleted is bool
        && request.resource.data.restaurantId is string
        && request.resource.data.dishName is string
        && request.resource.data.rating is number;

      // Update: only owner; if fields are present, enforce types; userId must not change
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId
        && (!('createdAt' in request.resource.data) || request.resource.data.createdAt is timestamp)
        && (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp)
        && (!('isDeleted' in request.resource.data) || request.resource.data.isDeleted is bool)
        && (!('restaurantId' in request.resource.data) || request.resource.data.restaurantId is string)
        && (!('dishName' in request.resource.data) || request.resource.data.dishName is string)
        && (!('rating' in request.resource.data) || request.resource.data.rating is number);

      // Hard deletes blocked (use soft-delete via isDeleted)
      allow delete: if false;
    }

    // Owner claims: users can submit claims; only admins can approve
    match /owner_claims/{claimId} {
      allow read: if authed() && (
        isAdminUser() || (resource.data.requesterUid == request.auth.uid)
      );
      allow create: if authed() && (
        request.resource.data.requesterUid == request.auth.uid &&
        request.resource.data.restaurantId is string &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt is timestamp
      );
      allow update: if isAdminUser();
      allow delete: if isAdminUser();
    }

    // Deals
    match /deals/{dealId} {
      allow read: if authed() && (
        isAdminUser() || isRestaurantOwner(resource.data.restaurantId)
      );
      allow create: if authed() && (
        isRestaurantOwner(request.resource.data.restaurantId) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.status in ['draft','submitted'] &&
        request.resource.data.createdAt is timestamp
      );
      allow update: if authed() && (
        isAdminUser() || (
          isRestaurantOwner(resource.data.restaurantId) &&
          (!('restaurantId' in request.resource.data) || request.resource.data.restaurantId == resource.data.restaurantId) &&
          (!('createdBy' in request.resource.data) || request.resource.data.createdBy == resource.data.createdBy) &&
          (!('status' in request.resource.data) || request.resource.data.status in ['draft','submitted'])
        )
      );
      allow delete: if isAdminUser();
    }

    // Restaurant stats (MVP; client cache writes allowed for owners)
    match /restaurant_stats/{restaurantId} {
      allow read: if authed() && (isAdminUser() || isRestaurantOwner(restaurantId));
      allow write: if authed() && (isAdminUser() || isRestaurantOwner(restaurantId));
    }

    // Saved lists collection - users can only access their own lists
    match /savedLists/{listId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Follows collection - users can read any follow relationship but only create/delete their own
    match /follows/{followId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == resource.data.followerId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
  }
}
